@page "/"
@using CarRental.Business.Classes
@using CarRental.Common.Interfaces
@using CarRental.Common.Enums
@using CarRental.Data.Classes

@inject BookingProcessor BP

<h1>Car Rental Assignment - VG</h1>
<h3>Vehicles</h3>

@if (error != string.Empty)
{
    <div class="row">
        <div class="col-12 alert alert-danger" role="alert">
            <strong>Error</strong> @error
        </div>
    </div>
}

<div class="row">
    <div class="col-12">
        <table class="table table-hover" style="border: 1px solid">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">RegNo</th>
                    <th scope="col">Make</th>
                    <th scope="col">Odometer</th>
                    <th scope="col">Cost Km</th>
                    <th scope="col">Vehicle Type</th>
                    <th scope="col">$ Day</th>
                    <th scope="col" style="width:177px;">Action</th>
                    <th scope="col"></th>
                    <th scope="col" style="width:95px!important">Status</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row"><input style="height:31px;" placeholder="RegNo" @bind="registrationNumber" /></th>
                    <td><input style="height:31px;" placeholder="Make" @bind="make" /></td>
                    <td><input style="height:31px;" placeholder="Odometer" @bind="odometer" /></td>
                    <td><input style="height:31px;" placeholder="Cost Km" @bind="costKm" /></td>
                    <td>
                        <select style="height:31px;" @bind="selectedVehicleType">
                            @foreach (var type in BP.VehicleTypeNames)
                            {
                                <option value=@type>@type</option>
                            }
                        </select>
                    </td>
                    <td></td>
                    <td><button class="btn btn-outline-success btn-sm" @onclick="AddVehicle">Add</button></td>
                    <td></td>
                    <td></td>
                </tr>

                @foreach (var vehicle in vehicles)
                {
            <tr>
                @*css styleing for th and td*@
                <th scope="row">@vehicle.RegistrationNumber</th>
                <td>@vehicle.Make</td>
                <td>@vehicle.Odometer</td>
                <td>@vehicle.CostKm</td>
                <td>@vehicle.Type</td>
                <td>@vehicle.CostDay</td>
                <td>
                    @if (vehicle.Status.Equals(VehicleStatuses.Booked))
                    {
                        <input style="width:100%; height:31px;" placeholder="Distance" @bind="distance" />
                    }
                    else
                    {
                        <select style="height:31px;" @bind="selectedCustomerId">
                            @foreach (var customer in BP.GetCustomers())
                            {
                                <option value=@customer.Id>@customer.ToString()</option>
                            }
                        </select>
                    }
                </td>
                <td>
                    @if (vehicle.Status.Equals(VehicleStatuses.Booked))
                    {
                        <button style="width:100%;" class="btn btn-outline-danger btn-sm" @onclick="@(e => ReturnVehicle(vehicle.Id))">Return</button>
                    }
                    else
                    {
                        <button style="width:100%;" class="btn btn-outline-primary btn-sm" @onclick="@(e => RentVehicle(vehicle.Id))">Rent</button>
                    }
                </td>
                <td><span class="badge badge-@(vehicle.Status.Equals(VehicleStatuses.Available) ? "dark" : "danger") badge-pill float-right" style="margin-top:3px;">@vehicle.Status</span></td>
            </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<h3>Bookings</h3>
<div class="row">
    <div class="col-12">
        <table class="table table-hover" style="border: 1px solid">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">RegNo</th>
                    <th scope="col">Customer</th>
                    <th scope="col">Km Rented</th>
                    <th scope="col">Km Returned</th>
                    <th scope="col">Rented</th>
                    <th scope="col">Returned</th>
                    <th scope="col">Cost</th>
                    <th scope="col">Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var booking in bookings)
                {
                    <tr>
                        <th scope="row">@booking.RegistrationNumber</th>
                        <td>@booking.Person.ToString()</td>
                        <td>@booking.OdometerRented</td>
                        <td>
                            @if (booking.OdometerReturned != default)
                            {
                                @booking.OdometerReturned
                            }
                        </td>
                        <td>@booking.Rented.ToShortDateString()</td>
                        <td>
                            @if (booking.Returned != default)
                            {
                                @booking.Returned.ToShortDateString()
                            }
                        </td>
                        <td>
                            @if (booking.Cost != default)
                            {
                                @booking.Cost
                            }
                        </td>
                        <td>
                            @if (booking.Returned == default)
                            {
                                <span href="#" class="badge badge-danger">Open</span>
                            }
                            else
                            {
                                <span href="#" class="badge badge-success">Closed</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<h3>Customers</h3>
<div class="row">
    <div class="col-6">
        <table class="table table-hover" style="border: 1px solid">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">SSN</th>
                    <th scope="col">Last Name</th>
                    <th scope="col">First Name</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row"><input style="height:31px;" placeholder="SSN" @bind="social" /></th>
                    <td><input style="height:31px;" placeholder="First Name" @bind="firstName" /></td>
                    <td><input style="height:31px;" placeholder="Last Name" @bind="lastName" /></td>
                    <td><button class="btn btn-outline-success btn-sm" @onclick="AddCustomer">Add</button></td>
                </tr>
                @foreach (var customer in BP.GetCustomers())
                {
                    <tr>
                        <th scope="row">@customer.SocialSecurityNumber</th>
                        <td>@customer.LastName</td>
                        <td>@customer.FirstName</td>
                        <td></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>    
</div>

@code {
    //vehicles
    string error = string.Empty;
    string registrationNumber = string.Empty;
    string make = string.Empty;
    string odometer = string.Empty;
    string costKm = string.Empty;
    string selectedVehicleType = default;
    string selectedCustomerId = "1";
    string distance = string.Empty;
    IEnumerable<IVehicle> vehicles;
    //bookings
    IEnumerable<IBooking> bookings;
    //customers
    string social = string.Empty;
    string firstName = string.Empty;
    string lastName = string.Empty;

    protected override void OnInitialized()
    {
        vehicles = BP.GetVehicles();
        bookings = BP.GetBookings();
    }

    void AddVehicle()
    {
        try
        {
            if (registrationNumber == string.Empty || make == string.Empty || odometer == string.Empty || costKm == string.Empty || selectedVehicleType == default)
                throw new AggregateException("Could not add vehicle.");

            else
            {
                var convertedOdometer = Convert.ToDouble(odometer);
                var convertedCostKm = Convert.ToDouble(costKm);
                Enum.TryParse(selectedVehicleType, out VehicleTypes enumSelectedVehicle);

                BP.AddVehicle(make, registrationNumber, convertedOdometer, convertedCostKm, VehicleStatuses.Available, enumSelectedVehicle);

                vehicles = BP.GetVehicles();

                registrationNumber = string.Empty;
                make = string.Empty;
                odometer = string.Empty;
                costKm = string.Empty;
                selectedVehicleType = default;
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void ReturnVehicle(int id)
    {
        try
        {
            if (distance == string.Empty)
                throw new AggregateException("Could not return vehicle.");

            else
            {
                var convertedDistance = Convert.ToDouble(distance);

                BP.ReturnVehicle(id, convertedDistance);
                
                
                bookings = BP.GetBookings();
                vehicles = BP.GetVehicles();
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void RentVehicle(int id)
    {
        try
        {
            int xCustomerId = Int32.Parse(selectedCustomerId);
            BP.RentVehicle(id, xCustomerId);

            bookings = BP.GetBookings();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

    }

    void AddCustomer()
    {
        try
        {
            if (social == string.Empty || firstName == string.Empty || lastName == string.Empty)
                throw new AggregateException("Could not add customer.");

            else
            {
                BP.AddCustomer(social, firstName, lastName);

                var customers = BP.GetCustomers();

                social = string.Empty;
                firstName = string.Empty;
                lastName = string.Empty;
            }

        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }


}
